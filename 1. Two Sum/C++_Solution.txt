class Solution {
public:

    // Solution: O(n) time complexity - O(n) space complexity
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); i++) {
            if (map.find(target - nums[i]) != map.end()) {
                return {map[target - nums[i]], i};
            }
            map[nums[i]] = i;
        }
        return {};
    }

    // Solution: O(n^2) time complexity - O(1) space complexity
    vector<int> twoSum(vector<int>& nums, int target) { 
        int num1 = 0;
        int num2 = 0;
        
        for(int i = 0;i < nums.size()-1; i++) {
            for(int j = i + 1;j < nums.size(); j++) {
                if(nums[i] + nums[j] == target) {
                        num1 = i;
                        num2 = j;
                }
            }
        }

        return {num1, num2};
    }
};